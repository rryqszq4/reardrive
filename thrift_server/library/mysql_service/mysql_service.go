// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package mysql_service

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Host
//  - Port
//  - User
//  - Password
//  - Database
//  - Charset
type MysqlStruct struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Port int32 `thrift:"port,2" db:"port" json:"port"`
  User string `thrift:"user,3" db:"user" json:"user"`
  Password string `thrift:"password,4" db:"password" json:"password"`
  Database string `thrift:"database,5" db:"database" json:"database"`
  Charset string `thrift:"charset,6" db:"charset" json:"charset"`
}

func NewMysqlStruct() *MysqlStruct {
  return &MysqlStruct{}
}


func (p *MysqlStruct) GetHost() string {
  return p.Host
}

func (p *MysqlStruct) GetPort() int32 {
  return p.Port
}

func (p *MysqlStruct) GetUser() string {
  return p.User
}

func (p *MysqlStruct) GetPassword() string {
  return p.Password
}

func (p *MysqlStruct) GetDatabase() string {
  return p.Database
}

func (p *MysqlStruct) GetCharset() string {
  return p.Charset
}
func (p *MysqlStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MysqlStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *MysqlStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *MysqlStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *MysqlStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *MysqlStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Database = v
}
  return nil
}

func (p *MysqlStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Charset = v
}
  return nil
}

func (p *MysqlStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MysqlStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MysqlStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *MysqlStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *MysqlStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user: ", p), err) }
  return err
}

func (p *MysqlStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *MysqlStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("database", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:database: ", p), err) }
  if err := oprot.WriteString(string(p.Database)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.database (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:database: ", p), err) }
  return err
}

func (p *MysqlStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("charset", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:charset: ", p), err) }
  if err := oprot.WriteString(string(p.Charset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.charset (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:charset: ", p), err) }
  return err
}

func (p *MysqlStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MysqlStruct(%+v)", *p)
}

// Attributes:
//  - Sql
type QueryStruct struct {
  Sql string `thrift:"sql,1" db:"sql" json:"sql"`
}

func NewQueryStruct() *QueryStruct {
  return &QueryStruct{}
}


func (p *QueryStruct) GetSql() string {
  return p.Sql
}
func (p *QueryStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sql = v
}
  return nil
}

func (p *QueryStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sql", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sql: ", p), err) }
  if err := oprot.WriteString(string(p.Sql)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sql (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sql: ", p), err) }
  return err
}

func (p *QueryStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryStruct(%+v)", *p)
}

// Attributes:
//  - Data
type ItemStruct struct {
  Data map[string]string `thrift:"data,1" db:"data" json:"data"`
}

func NewItemStruct() *ItemStruct {
  return &ItemStruct{}
}


func (p *ItemStruct) GetData() map[string]string {
  return p.Data
}
func (p *ItemStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ItemStruct)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Data =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Data[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ItemStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ItemStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Data {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *ItemStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemStruct(%+v)", *p)
}

// Attributes:
//  - Rows
//  - Error
//  - Query
//  - Columns
type QueryResultStruct struct {
  Rows []*ItemStruct `thrift:"rows,1" db:"rows" json:"rows"`
  Error string `thrift:"error,2" db:"error" json:"error"`
  Query *QueryStruct `thrift:"query,3" db:"query" json:"query"`
  Columns map[string]string `thrift:"columns,4" db:"columns" json:"columns"`
}

func NewQueryResultStruct() *QueryResultStruct {
  return &QueryResultStruct{}
}


func (p *QueryResultStruct) GetRows() []*ItemStruct {
  return p.Rows
}

func (p *QueryResultStruct) GetError() string {
  return p.Error
}
var QueryResultStruct_Query_DEFAULT *QueryStruct
func (p *QueryResultStruct) GetQuery() *QueryStruct {
  if !p.IsSetQuery() {
    return QueryResultStruct_Query_DEFAULT
  }
return p.Query
}

func (p *QueryResultStruct) GetColumns() map[string]string {
  return p.Columns
}
func (p *QueryResultStruct) IsSetQuery() bool {
  return p.Query != nil
}

func (p *QueryResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ItemStruct, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &ItemStruct{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Rows = append(p.Rows, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *QueryResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *QueryResultStruct)  ReadField3(iprot thrift.TProtocol) error {
  p.Query = &QueryStruct{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *QueryResultStruct)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Columns =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.Columns[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *QueryResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rows: ", p), err) }
  return err
}

func (p *QueryResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
  if err := oprot.WriteString(string(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  return err
}

func (p *QueryResultStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query: ", p), err) }
  return err
}

func (p *QueryResultStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:columns: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Columns {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:columns: ", p), err) }
  return err
}

func (p *QueryResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryResultStruct(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Error
//  - LastInsertId
//  - RowsAffected
//  - Query
type ExecuteResultStruct struct {
  Result_ string `thrift:"result,1" db:"result" json:"result"`
  Error string `thrift:"error,2" db:"error" json:"error"`
  LastInsertId int64 `thrift:"lastInsertId,3" db:"lastInsertId" json:"lastInsertId"`
  RowsAffected int64 `thrift:"rowsAffected,4" db:"rowsAffected" json:"rowsAffected"`
  Query *QueryStruct `thrift:"query,5" db:"query" json:"query"`
}

func NewExecuteResultStruct() *ExecuteResultStruct {
  return &ExecuteResultStruct{}
}


func (p *ExecuteResultStruct) GetResult_() string {
  return p.Result_
}

func (p *ExecuteResultStruct) GetError() string {
  return p.Error
}

func (p *ExecuteResultStruct) GetLastInsertId() int64 {
  return p.LastInsertId
}

func (p *ExecuteResultStruct) GetRowsAffected() int64 {
  return p.RowsAffected
}
var ExecuteResultStruct_Query_DEFAULT *QueryStruct
func (p *ExecuteResultStruct) GetQuery() *QueryStruct {
  if !p.IsSetQuery() {
    return ExecuteResultStruct_Query_DEFAULT
  }
return p.Query
}
func (p *ExecuteResultStruct) IsSetQuery() bool {
  return p.Query != nil
}

func (p *ExecuteResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExecuteResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *ExecuteResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Error = v
}
  return nil
}

func (p *ExecuteResultStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastInsertId = v
}
  return nil
}

func (p *ExecuteResultStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RowsAffected = v
}
  return nil
}

func (p *ExecuteResultStruct)  ReadField5(iprot thrift.TProtocol) error {
  p.Query = &QueryStruct{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *ExecuteResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExecuteResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecuteResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ExecuteResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
  if err := oprot.WriteString(string(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  return err
}

func (p *ExecuteResultStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastInsertId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastInsertId: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastInsertId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastInsertId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastInsertId: ", p), err) }
  return err
}

func (p *ExecuteResultStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rowsAffected", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rowsAffected: ", p), err) }
  if err := oprot.WriteI64(int64(p.RowsAffected)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rowsAffected (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rowsAffected: ", p), err) }
  return err
}

func (p *ExecuteResultStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:query: ", p), err) }
  return err
}

func (p *ExecuteResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecuteResultStruct(%+v)", *p)
}

type MysqlService interface {
  // Parameters:
  //  - Mysql
  //  - Query
  Execute(ctx context.Context, mysql *MysqlStruct, query *QueryStruct) (r *ExecuteResultStruct, err error)
  // Parameters:
  //  - Mysql
  //  - Query
  Query(ctx context.Context, mysql *MysqlStruct, query *QueryStruct) (r *QueryResultStruct, err error)
}

type MysqlServiceClient struct {
  c thrift.TClient
}

func NewMysqlServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MysqlServiceClient {
  return &MysqlServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMysqlServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MysqlServiceClient {
  return &MysqlServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMysqlServiceClient(c thrift.TClient) *MysqlServiceClient {
  return &MysqlServiceClient{
    c: c,
  }
}

func (p *MysqlServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Mysql
//  - Query
func (p *MysqlServiceClient) Execute(ctx context.Context, mysql *MysqlStruct, query *QueryStruct) (r *ExecuteResultStruct, err error) {
  var _args5 MysqlServiceExecuteArgs
  _args5.Mysql = mysql
  _args5.Query = query
  var _result6 MysqlServiceExecuteResult
  if err = p.Client_().Call(ctx, "execute", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Mysql
//  - Query
func (p *MysqlServiceClient) Query(ctx context.Context, mysql *MysqlStruct, query *QueryStruct) (r *QueryResultStruct, err error) {
  var _args7 MysqlServiceQueryArgs
  _args7.Mysql = mysql
  _args7.Query = query
  var _result8 MysqlServiceQueryResult
  if err = p.Client_().Call(ctx, "query", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

type MysqlServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MysqlService
}

func (p *MysqlServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MysqlServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MysqlServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMysqlServiceProcessor(handler MysqlService) *MysqlServiceProcessor {

  self9 := &MysqlServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self9.processorMap["execute"] = &mysqlServiceProcessorExecute{handler:handler}
  self9.processorMap["query"] = &mysqlServiceProcessorQuery{handler:handler}
return self9
}

func (p *MysqlServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x10.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x10

}

type mysqlServiceProcessorExecute struct {
  handler MysqlService
}

func (p *mysqlServiceProcessorExecute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MysqlServiceExecuteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MysqlServiceExecuteResult{}
var retval *ExecuteResultStruct
  var err2 error
  if retval, err2 = p.handler.Execute(ctx, args.Mysql, args.Query); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: " + err2.Error())
    oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("execute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mysqlServiceProcessorQuery struct {
  handler MysqlService
}

func (p *mysqlServiceProcessorQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MysqlServiceQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MysqlServiceQueryResult{}
var retval *QueryResultStruct
  var err2 error
  if retval, err2 = p.handler.Query(ctx, args.Mysql, args.Query); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query: " + err2.Error())
    oprot.WriteMessageBegin("query", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("query", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Mysql
//  - Query
type MysqlServiceExecuteArgs struct {
  Mysql *MysqlStruct `thrift:"mysql,1" db:"mysql" json:"mysql"`
  Query *QueryStruct `thrift:"query,2" db:"query" json:"query"`
}

func NewMysqlServiceExecuteArgs() *MysqlServiceExecuteArgs {
  return &MysqlServiceExecuteArgs{}
}

var MysqlServiceExecuteArgs_Mysql_DEFAULT *MysqlStruct
func (p *MysqlServiceExecuteArgs) GetMysql() *MysqlStruct {
  if !p.IsSetMysql() {
    return MysqlServiceExecuteArgs_Mysql_DEFAULT
  }
return p.Mysql
}
var MysqlServiceExecuteArgs_Query_DEFAULT *QueryStruct
func (p *MysqlServiceExecuteArgs) GetQuery() *QueryStruct {
  if !p.IsSetQuery() {
    return MysqlServiceExecuteArgs_Query_DEFAULT
  }
return p.Query
}
func (p *MysqlServiceExecuteArgs) IsSetMysql() bool {
  return p.Mysql != nil
}

func (p *MysqlServiceExecuteArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *MysqlServiceExecuteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MysqlServiceExecuteArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Mysql = &MysqlStruct{}
  if err := p.Mysql.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mysql), err)
  }
  return nil
}

func (p *MysqlServiceExecuteArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Query = &QueryStruct{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *MysqlServiceExecuteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MysqlServiceExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mysql", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mysql: ", p), err) }
  if err := p.Mysql.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mysql), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mysql: ", p), err) }
  return err
}

func (p *MysqlServiceExecuteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *MysqlServiceExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MysqlServiceExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MysqlServiceExecuteResult struct {
  Success *ExecuteResultStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMysqlServiceExecuteResult() *MysqlServiceExecuteResult {
  return &MysqlServiceExecuteResult{}
}

var MysqlServiceExecuteResult_Success_DEFAULT *ExecuteResultStruct
func (p *MysqlServiceExecuteResult) GetSuccess() *ExecuteResultStruct {
  if !p.IsSetSuccess() {
    return MysqlServiceExecuteResult_Success_DEFAULT
  }
return p.Success
}
func (p *MysqlServiceExecuteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MysqlServiceExecuteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MysqlServiceExecuteResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExecuteResultStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MysqlServiceExecuteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MysqlServiceExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MysqlServiceExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MysqlServiceExecuteResult(%+v)", *p)
}

// Attributes:
//  - Mysql
//  - Query
type MysqlServiceQueryArgs struct {
  Mysql *MysqlStruct `thrift:"mysql,1" db:"mysql" json:"mysql"`
  Query *QueryStruct `thrift:"query,2" db:"query" json:"query"`
}

func NewMysqlServiceQueryArgs() *MysqlServiceQueryArgs {
  return &MysqlServiceQueryArgs{}
}

var MysqlServiceQueryArgs_Mysql_DEFAULT *MysqlStruct
func (p *MysqlServiceQueryArgs) GetMysql() *MysqlStruct {
  if !p.IsSetMysql() {
    return MysqlServiceQueryArgs_Mysql_DEFAULT
  }
return p.Mysql
}
var MysqlServiceQueryArgs_Query_DEFAULT *QueryStruct
func (p *MysqlServiceQueryArgs) GetQuery() *QueryStruct {
  if !p.IsSetQuery() {
    return MysqlServiceQueryArgs_Query_DEFAULT
  }
return p.Query
}
func (p *MysqlServiceQueryArgs) IsSetMysql() bool {
  return p.Mysql != nil
}

func (p *MysqlServiceQueryArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *MysqlServiceQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MysqlServiceQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Mysql = &MysqlStruct{}
  if err := p.Mysql.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mysql), err)
  }
  return nil
}

func (p *MysqlServiceQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Query = &QueryStruct{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *MysqlServiceQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("query_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MysqlServiceQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mysql", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mysql: ", p), err) }
  if err := p.Mysql.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mysql), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mysql: ", p), err) }
  return err
}

func (p *MysqlServiceQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *MysqlServiceQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MysqlServiceQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MysqlServiceQueryResult struct {
  Success *QueryResultStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMysqlServiceQueryResult() *MysqlServiceQueryResult {
  return &MysqlServiceQueryResult{}
}

var MysqlServiceQueryResult_Success_DEFAULT *QueryResultStruct
func (p *MysqlServiceQueryResult) GetSuccess() *QueryResultStruct {
  if !p.IsSetSuccess() {
    return MysqlServiceQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *MysqlServiceQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MysqlServiceQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MysqlServiceQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &QueryResultStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MysqlServiceQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("query_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MysqlServiceQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MysqlServiceQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MysqlServiceQueryResult(%+v)", *p)
}


